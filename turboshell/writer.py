import os
from datetime import datetime
from .loaders import load_builtin_cmds
from .turboshell import ts
from .utils import extract_stubs, write_to_file


file_lines = []
add = file_lines.append


class Writer:
    """
    Writes to a definitions file.
    """
    def __init__(self, ts, target):
        self.ts = ts
        self.settings = ts.settings
        self.now = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
        self.target = target
        self.unique_alises = set()
        file_lines.clear()

    def write(self):
        start = datetime.now()
        total = self._write()
        end = datetime.now()
        time = (end - start).microseconds / 1000
        print("Generated {} definitions in {} ms".format(total, time))
    
    def _write(self):
        if self.settings.include_header:
            self._add_header()

        if self.settings.include_builtins:
            load_builtin_cmds()
        self._add_definitions()
        if self.settings.add_info:
            self._add_info_function(self.ts.info_entries, self.ts.alias_groups, self.ts.group_info)
        if self.settings.add_stubs:
            self._add_stubs()
        write_to_file(self.target, file_lines)
        return 1000

    def _add_header(self):
        add(f"# This file was generated by Turboshell's rebuild command on {self.now}.")
        add("# Changes made here will be overwritten.")
        add(" ")

    def _add_definitions(self):
        self._add_aliases(self.ts.aliases)
        self._add_functions(self.ts.functions)

    def _add_aliases(self, aliases):
        add("# Aliases:")
        add(" ")
        for name in sorted(aliases):
            cmd =  aliases[name]
            self.unique_alises.add(name)
            add("alias {}='{}'".format(name, cmd))
        add(" ")

    def _add_functions(self, functions):
        add("# Functions:")
        add(" ")
        for name in sorted(functions):
            lines = functions[name]
            self.unique_alises.add(name)
            self._write_function(name, *lines)
        add(" ")

    def _write_function(self, name, *lines):
        add("function " + name + " {")
        for line in lines:
            add("  " + line)
        add("}")
        add(" ")

    def _add_stubs(self):
        """
        Creates stubs for all intermediate aliases to improve autocompletion.
        Experimental, may not be useful.
        """
        stubs = set()
        for alias in self.unique_alises:
            for stub in extract_stubs(alias):
                if stub not in self.unique_alises:
                    stubs.add(stub)
        if len(stubs):
            add("# Stubs:")
            add(" ")
            add("alias ts.stub='echo stub'".format(stub))
            for stub in stubs:
                add("alias {}=ts.stub".format(stub))
                # add("complete -F _longopt -o nospace {}".format(stub))
            add(" ")

    def _add_info_function(self, info_entries, alias_groups, group_info):
        """
        Creates the ts.info bash function.
        """

        def echo(line):
            add(" echo '  {}'".format(line))

        def add_group(items):
            """items must be list of tuples"""
            if len(items) == 0:
                return
            for alias, info in sorted(items, key=lambda x: x[0]):
                space = (longest - len(alias)) * ' '
                echo("{} {}| {}".format(alias, space, info))
            echo('')

        def find_entries(predicate):
            """returns list of tuples for entries whose key matches predicate"""
            return [(k, v) for k, v in info_entries.items() if predicate(k)]

        # Get longest alias text so we know how much to pad everything by
        if len(info_entries):
            longest = max(len(e) for e in info_entries.keys())
        else:
            longest = 4

        add("# Info function:")
        add('')
        add("function ts.info {")
        echo('')
        echo('Alias file:  {}'.format(self.target))
        echo('Rebuilt on:  {}'.format(self.now))
        echo('')
        echo('Commands:')
        echo('')

        # Write entries for built in commands first
        builtin_entries = find_entries(lambda alias: alias.startswith('ts.'))
        add_group(builtin_entries)

        # Then for ungrouped entries
        ungrouped_entries = find_entries(lambda alias: alias not in alias_groups and not alias.startswith('ts.'))
        add_group(ungrouped_entries)

        # Then for grouped_entries
        group_names = set(alias_groups.values())
        for group in sorted(group_names):
            echo('')
            echo('{}'.format(group))
            echo('-' * len(group))
            if group in group_info:
                for line in group_info[group]:
                    echo(line)
            echo('')
            group = find_entries(lambda alias: alias in alias_groups and alias_groups[alias] == group)
            add_group(group)

        add("}")
